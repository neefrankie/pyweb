from django.db.models import F
from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.urls import reverse
from django.views import generic
from django.utils import timezone

from .models import Question, Choice


# Create your views here.

# Each generic view needs to know what model it will be acting upon.
# This is provided using either the model attribute, or
# by defining the get_queryset() method.
# The `ListView` generic view uses a default template called
# `<app name>/<model name>_list.html`
class IndexView(generic.ListView):
    template_name = "polls/index.html"
    # The automatically generated context variable is
    # `question_list`. To override this we provide the
    # `context_object_name` attribute.
    context_object_name = "latest_question_list"

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.filter(pub_date__lte=timezone.now()).order_by("-pub_date")[:5]


# By default, the DetailView generic view uses a template called
# <app name>/<model name>_detail.html
# The `template_name` attribute is used to tell Django to use a
# specific template name instead of the autogenerated default
# template name.
class DetailView(generic.DetailView):
    # We are using Django model `Question`, Django is able to
    # determine an appropriate name for the context variable.
    model = Question
    template_name = "polls/detail.html"


class ResultsView(generic.DetailView):
    model = Question
    template_name = "polls/results.html"


# To call the view, map it to a URL.
# def index(request):
#     latest_question_list = Question.objects.order_by("-pub_date")[:5]
#     context = {
#         "latest_question_list": latest_question_list,
#     }
#     return render(request, "polls/index.html", context)


# def detail(request, question_id):
#     try:
#         question = Question.objects.get(pk=question_id)
#     except Question.DoesNotExist:
#         raise Http404("Question does not exist")
#
#     return render(request, "polls/detail.html", {"question": question})


# def result(request, question_id):
#     question = get_object_or_404(Question, pk=question_id)
#     return render(request, "polls/results.html", {"question": question})


def vote(request, question_id: int):
    question = get_object_or_404(Question, pk=question_id)
    try:
        # request.POST is a dictionary -like object that you access
        # submitted data by key name.
        # Django also provides request.GET for accessing GET data
        # in the same way.
        # request.POST['choice'] will raise KeyError if choice wasn't provided
        # in POST data.
        selected_choice: Choice = question.choice_set.get(pk=request.POST["choice"])
    except (KeyError, Choice.DoesNotExist):
        # Raise KeyError if choice wasn't provided in POST data.
        # Then redisplay the question form with an error message if
        # choice isn't given.
        return render(
            request,
            "polls/detail.html",
            {
                "question": question,
                "error_message": "You didn't select a choice.",
            },
        )
    else:
        selected_choice.votes = F("votes") + 1
        selected_choice.save()
        # After incrementing the choice count, the code returns an HttpResponseRedirect
        # rather than a normal HttpResponse.
        return HttpResponseRedirect(reverse("polls:results", args=(question_id,)))

